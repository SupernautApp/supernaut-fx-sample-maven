<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>app.supernaut</groupId>
  <artifactId>hellofx</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>SupernautFXHello</name>
  <url>https://github.com/SupernautApp/supernaut-fx-sample-maven</url>

  <properties>
    <main.class>app.supernaut.fx.sample.maven.HelloFX</main.class>
    <main.module>hellofx</main.module>
    <maven.compiler.release>11</maven.compiler.release>
    <javafx.version>17.0.2</javafx.version>
    <micronaut.version>3.3.4</micronaut.version>
    <supernaut.version>0.4.0</supernaut.version>
    <slf4j.version>2.0.0-alpha6</slf4j.version>
    <javafx.maven.plugin.version>0.0.8</javafx.maven.plugin.version>
    <gluonfx.maven.plugin.version>1.0.12</gluonfx.maven.plugin.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <repositories>
    <repository>
      <id>gitlab-supernaut-maven</id>
      <url>https://gitlab.com/api/v4/projects/26584840/packages/maven</url>
    </repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jdk14</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-base</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-graphics</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>app.supernaut</groupId>
      <artifactId>app.supernaut.fx</artifactId>
      <version>${supernaut.version}</version>
    </dependency>
    <dependency>
      <groupId>app.supernaut</groupId>
      <artifactId>app.supernaut.fx.micronaut</artifactId>
      <version>${supernaut.version}</version>
    </dependency>
    <dependency>
      <groupId>io.micronaut</groupId>
      <artifactId>micronaut-inject</artifactId>
      <version>${micronaut.version}</version>
      <exclusions>
        <exclusion>
          <groupId>javax.annotation</groupId>
          <artifactId>javax.annotation-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.yaml</groupId>
          <artifactId>snakeyaml</artifactId>
        </exclusion>
      </exclusions> 
    </dependency>
    <dependency>
      <groupId>jakarta.inject</groupId>
      <artifactId>jakarta.inject-api</artifactId>
      <version>2.0.1</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>io.micronaut.build</groupId>
        <artifactId>micronaut-maven-plugin</artifactId>
        <version>3.1.1</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <release>${maven.compiler.release}</release>
          <debug>true</debug>
          <debuglevel>lines,vars,source</debuglevel>
          <annotationProcessorPaths>
            <path>
              <groupId>io.micronaut</groupId>
              <artifactId>micronaut-inject-java</artifactId>
              <version>${micronaut.version}</version>
            </path>
          </annotationProcessorPaths>
          <compilerArgs>
            <arg>-Amicronaut.processing.group=org.openjfx</arg>
            <arg>-Amicronaut.processing.module=hellofx</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <!-- create project's jar file in the target/modules folder
           (to be used in the jlink image creation later) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <outputDirectory>${project.build.directory}/modules</outputDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>${javafx.maven.plugin.version}</version>
        <configuration>
          <mainClass>${main.module}/${main.class}</mainClass>
          <!--
          <runtimePathOption>MODULEPATH</runtimePathOption>
          <options>
            <option>-patch-module</option>
            <option>java.annotation=jsr305-3.0.2.jar</option>
            <option>-add-modules</option>
            <option>app.supernaut.fx.micronaut</option>
          </options>
          -->
          <jlinkImageName>hellofx</jlinkImageName>
          <launcher>launcher</launcher>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.gluonhq</groupId>
        <artifactId>gluonfx-maven-plugin</artifactId>
        <version>${gluonfx.maven.plugin.version}</version>
        <configuration>
          <target>${gluonfx.target}</target>
          <mainClass>${main.class}</mainClass>
          <javafxStaticSdkVersion>18-ea+10</javafxStaticSdkVersion> <!-- 18-ea+4 fixes showDocument on macOS -->
          <releaseConfiguration>
              <macAppStore>false</macAppStore>
              <skipSigning>true</skipSigning>
          </releaseConfiguration>
        </configuration>
      </plugin>
      <!-- following plugins are used, at package phase, to produce a jlink image for the project:
           Step 1: copy all dependencies to target/modules folder -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/modules</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
              <excludeTransitive>false</excludeTransitive>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Step 2: generate the jlink image for the hellofx application -->
      <plugin>
        <groupId>org.moditect</groupId>
        <artifactId>moditect-maven-plugin</artifactId>
        <version>1.0.0.RC2</version>
        <executions>
          <!-- Step 2a: first, modularize the non-modular micronaut libraries -->
          <execution>
            <id>add-module-infos</id>
            <phase>package</phase>
            <goals>
              <goal>add-module-info</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/modules</outputDirectory>
              <overwriteExistingFiles>true</overwriteExistingFiles>
              <modules>
                <!-- modularize the micronaut-inject library -->
                <module>
                  <artifact>
                    <groupId>io.micronaut</groupId>
                    <artifactId>micronaut-inject</artifactId>
                    <version>${micronaut.version}</version>
                  </artifact>
                  <moduleInfoSource>
open module io.micronaut.inject {
    requires io.micronaut.core;
    requires transitive jakarta.annotation;
    requires transitive jakarta.inject;
    requires transitive org.slf4j;
    provides io.micronaut.context.env.PropertySourceLoader with
        io.micronaut.context.env.yaml.YamlPropertySourceLoader,
        io.micronaut.context.env.PropertiesPropertySourceLoader;
    provides io.micronaut.core.type.TypeInformationProvider with
        io.micronaut.inject.provider.ProviderTypeInformationProvider;
    provides io.micronaut.inject.BeanDefinitionReference with
        io.micronaut.inject.provider.JavaxProviderBeanDefinition,
        io.micronaut.inject.provider.BeanProviderDefinition,
        io.micronaut.inject.provider.JakartaProviderBeanDefinition,
        io.micronaut.context.event.ApplicationEventPublisherFactory;
    provides io.micronaut.inject.annotation.AnnotationMapper with
        io.micronaut.inject.annotation.internal.PersistenceContextAnnotationMapper,
        io.micronaut.inject.annotation.internal.TimedAnnotationMapper,
        io.micronaut.inject.beans.visitor.EntityIntrospectedAnnotationMapper,
        io.micronaut.inject.beans.visitor.EntityReflectiveAccessAnnotationMapper,
        io.micronaut.inject.beans.visitor.MappedSuperClassIntrospectionMapper,
        io.micronaut.inject.beans.visitor.JsonCreatorAnnotationMapper;
    provides io.micronaut.inject.annotation.AnnotationRemapper with
        io.micronaut.inject.annotation.internal.FindBugsRemapper,
        io.micronaut.inject.annotation.internal.JakartaRemapper;
    provides io.micronaut.inject.annotation.AnnotationTransformer with
        io.micronaut.inject.annotation.internal.CoreNullableTransformer,
        io.micronaut.inject.annotation.internal.CoreNonNullTransformer,
        io.micronaut.inject.annotation.internal.KotlinNullableMapper,
        io.micronaut.inject.annotation.internal.KotlinNotNullMapper,
        io.micronaut.inject.annotation.internal.JakartaPostConstructTransformer,
        io.micronaut.inject.annotation.internal.JakartaPreDestroyTransformer;
    provides io.micronaut.inject.configuration.ConfigurationMetadataWriter with
        io.micronaut.inject.configuration.JsonConfigurationMetadataWriter;
    provides io.micronaut.inject.visitor.TypeElementVisitor with
        io.micronaut.inject.beans.visitor.IntrospectedTypeElementVisitor,
        io.micronaut.context.visitor.BeanImportVisitor;
}
                  </moduleInfoSource>
                </module>
                <!-- modularize the micronaut-core library -->
                <module>
                  <artifact>
                    <groupId>io.micronaut</groupId>
                    <artifactId>micronaut-core</artifactId>
                    <version>${micronaut.version}</version>
                  </artifact>
                  <moduleInfoSource>
module io.micronaut.core {
    requires jakarta.annotation;
    requires jakarta.inject;
    requires java.logging;
    requires org.slf4j;
    requires transitive jdk.unsupported;
    exports io.micronaut.asm;
    exports io.micronaut.asm.commons;
    exports io.micronaut.asm.signature;
    exports io.micronaut.asm.tree;
    exports io.micronaut.asm.tree.analysis;
    exports io.micronaut.caffeine;
    exports io.micronaut.caffeine.base;
    exports io.micronaut.caffeine.cache;
    exports io.micronaut.caffeine.cache.stats;
    exports io.micronaut.core.annotation;
    exports io.micronaut.core.attr;
    exports io.micronaut.core.beans;
    exports io.micronaut.core.beans.exceptions;
    exports io.micronaut.core.bind;
    exports io.micronaut.core.bind.annotation;
    exports io.micronaut.core.bind.exceptions;
    exports io.micronaut.core.cli;
    exports io.micronaut.core.cli.exceptions;
    exports io.micronaut.core.convert;
    exports io.micronaut.core.convert.converters;
    exports io.micronaut.core.convert.exceptions;
    exports io.micronaut.core.convert.format;
    exports io.micronaut.core.convert.value;
    exports io.micronaut.core.exceptions;
    exports io.micronaut.core.graal;
    exports io.micronaut.core.io;
    exports io.micronaut.core.io.buffer;
    exports io.micronaut.core.io.file;
    exports io.micronaut.core.io.scan;
    exports io.micronaut.core.io.service;
    exports io.micronaut.core.io.socket;
    exports io.micronaut.core.naming;
    exports io.micronaut.core.naming.conventions;
    exports io.micronaut.core.order;
    exports io.micronaut.core.reflect;
    exports io.micronaut.core.reflect.exception;
    exports io.micronaut.core.serialize;
    exports io.micronaut.core.serialize.exceptions;
    exports io.micronaut.core.type;
    exports io.micronaut.core.util;
    exports io.micronaut.core.util.clhm;
    exports io.micronaut.core.util.functional;
    exports io.micronaut.core.util.locale;
    exports io.micronaut.core.value;
    exports io.micronaut.core.version;
    exports io.micronaut.core.version.annotation;
    uses    io.micronaut.core.optim.StaticOptimizations.Loader;
}
                  </moduleInfoSource>
                </module>
              </modules>
            </configuration>
          </execution>
          <!-- Step 2b: secondly, generate the jlink image from the target/modules folder -->
          <execution>
            <id>create-runtime-image</id>
            <phase>package</phase>
            <goals>
              <goal>create-runtime-image</goal>
            </goals>
            <configuration>
              <modulePath>
                <path>${project.build.directory}/modules</path>
              </modulePath>
              <modules>
                <!-- main application module (and implicitly including dependent modules) -->
                <module>${main.module}</module>
                <!-- extra modules required at runtime -->
                <module>app.supernaut.fx.micronaut</module>
                <module>org.slf4j.jul</module>
              </modules>
              <stripDebug>true</stripDebug>
              <noManPages>true</noManPages>
              <noHeaderFiles>true</noHeaderFiles>
              <compression>2</compression>
              <jarInclusionPolicy>NONE</jarInclusionPolicy>
              <launcher>
                <name>${main.module}</name>
                <module>${main.module}/${main.class}</module>
              </launcher>
              <outputDirectory>${project.build.directory}/image</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>desktop</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <gluonfx.target>host</gluonfx.target>
      </properties>
    </profile>
    <profile>
      <id>ios</id>
      <properties>
        <gluonfx.target>ios</gluonfx.target>
      </properties>
    </profile>
    <profile>
      <id>android</id>
      <properties>
        <gluonfx.target>android</gluonfx.target>
      </properties>
    </profile>
  </profiles>
</project>
